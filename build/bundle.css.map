{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../FileLoader.svelte",
    "../../Thread.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { setContext, onMount, afterUpdate } from \"svelte\";\n  import FileLoader from \"./components/FileLoader.svelte\";\n  import Thread from \"./components/Thread.svelte\";\n\n  import { FileStore } from \"./stores/FileStore\";\n  import { ThreadStore } from \"./stores/ThreadStore\";\n\n  export let services;\n  setContext(\"services\", services);\n\n  $: fileNames = $FileStore.map(file => file.name).sort();\n  $: loaded = fileNames && fileNames.length > 0;\n  $: threadNames = Object.keys(\n    Object.entries($ThreadStore).reduce((reduced, [fileName, threads]) => {\n      return Object.assign({}, reduced, threads);\n    }, {})\n  ).sort(nameSort);\n\n  let nameSort = (a, b) => {\n    let len = Math.min(a.length, b.length);\n    let a2 = a.padEnd(0, len - 1);\n    let b2 = b.slice(0, len - 1);\n\n    let sizeComp = a2.localeCompare(b2);\n    if (sizeComp == 0) {\n      if (a.length != b.length) {\n        return a.length - b.length;\n      }\n      return a.localeCompare(b);\n    } else {\n      return sizeComp;\n    }\n  };\n\n  $: threads = $ThreadStore;\n\n  let getThread = (fileName, threadName) => {\n    return threads[fileName] && threads[fileName][threadName]\n      ? threads[fileName][threadName]\n      : undefined;\n  };\n  let getThreadState = (fileName, threadName) => {\n    return threads[fileName] &&\n      threads[fileName][threadName] &&\n      threads[fileName][threadName].state\n      ? threads[fileName][threadName].state\n      : \"\";\n  };\n  let main;\n  let flexWidth;\n\n  let doResize = () => {\n    flexWidth = Math.floor(\n      main.getBoundingClientRect().width / (fileNames.length + 1)\n    );\n  };\n\n  onMount(() => {\n    doResize();\n  });\n  afterUpdate(() => {\n    doResize();\n  });\n\n  window.onresize = doResize;\n</script>\n\n<style>\n  div {\n    box-sizing: border-box;\n    font-size: 10pt;\n  }\n\n  div {\n    width: 100%;\n  }\n\n  .flex-container {\n    display: flex;\n    align-items: stretch;\n    width: 100%;\n  }\n  .flex-child {\n    overflow: hidden;\n    padding: 1px;\n  }\n  .main {\n    width: 0px;\n    align-items: stretch;\n  }\n  .sidebar {\n    width: 100%;\n  }\n  .filesloaded .sidebar {\n    flex-basis: 200px;\n  }\n  .filesloaded .main {\n    width: 100% !important;\n    margin: 0 1em;\n  }\n  .thread-row:hover {\n    background-color: rgb(0, 0, 0, 0.2);\n    /* border-top: 2px solid blue;\n    border-bottom: 2px solid blue; */\n  }\n</style>\n\n<main>\n  <div class=\"flex-container {loaded ? 'filesloaded' : ''}\">\n    <div class=\"sidebar\">\n      <div class=\"state {loaded ? '' : 'flex-container'}\">\n        <div class=\"R\">Running</div>\n        <div class=\"CW\">Waiting</div>\n        <div class=\"B\">Blocked</div>\n        <div class=\"S\">Suspended</div>\n        <div class=\"P\">Parked</div>\n        <div class=\"Z\">Zombie</div>\n      </div>\n      <FileLoader />\n    </div>\n    <div class=\"main\" bind:this={main}>\n      <div class=\"fileNames flex-container\">\n        <div class=\"flex-child\" style=\"width: {flexWidth}px\" />\n        {#each fileNames as fileName, index}\n          <div class=\"flex-child\" style=\"width: {flexWidth}px\">{fileName}</div>\n        {/each}\n      </div>\n      {#each threadNames as threadName, index}\n        <div class=\"flex-container thread-row\">\n          <div class=\"flex-child\" style=\"width: {flexWidth}px\">\n            {threadName}\n          </div>\n          {#each fileNames as fileName, index}\n            <Thread\n              thread={getThread(fileName, threadName)}\n              maxWidth={flexWidth} />\n          {/each}\n        </div>\n      {/each}\n    </div>\n  </div>\n</main>\n",
    "<script>\n    import {FileStore} from \"../stores/FileStore\"\n    let highlight = false;\n    function handleDragOver(e) {\n        highlight = true;\n    }\n    function handleDragIn(e) {\n        highlight = true;\n    }\n    function handleDragOut(e) {\n        highlight = false;\n    }\n\n    async function handleDrop(e) {\n        highlight = false;\n        let files = [];\n        for(let item of e.dataTransfer.items){\n\n            let entry  = item.webkitGetAsEntry();\n            if(entry){\n                if(entry.isDirectory){\n                    let entries = await traverseDirectory(entry);\n                    files = files.concat(entries);\n                }else{\n                    files = files.concat([entry])\n                }\n            }else{\n                console.log(\"error: not dropped\", item, entry);\n            }\n            \n        }\n\n        FileStore.addFiles(files);\n\n    }\n    async function traverseDirectory(dir){\n        let returnFiles = [];\n\n        let direntries = await readDirectory(dir);\n        for(let entry of direntries){\n            if(entry.isDirectory){\n                let entries = await traverseDirectory(entry);\n                returnFiles = returnFiles.concat(entries);\n            }else{\n                returnFiles = returnFiles.concat([entry])\n            }\n        }\n        return returnFiles;\n    }\n    async function readDirectory(dir){\n    return new Promise((resolve,reject)=>{\n      dir.createReader().readEntries((entries)=>{\n        resolve(entries);\n      },(err)=>{\n        reject(err);\n      });\n    });\n  }\n\n</script>\n<style>\n    .highlight{\n        border:3px solid RGB(0, 128, 0, .5) !important;\n        background-color: RGB(0, 255, 0, .05) !important;\n        \n    }\n    .dropzone {\n        line-height: 100px;\n        height:100px;\n        border:3px dashed RGB(0, 0, 128, .5);\n        background-color: RGB(0, 0, 255, .05);\n        \n    }\n</style>\n<div class=\"{highlight?'highlight':''} dropzone\"\n    on:dragenter|preventDefault={handleDragIn} \n    on:dragleave|preventDefault={handleDragOut} \n    on:dragover|preventDefault={handleDragOver} \n    on:drop|preventDefault={handleDrop}\n    >\n    Drop area\n</div>\n",
    "<script>\n  //import { FileStore } from \"../stores/FileStore\";\n  export let thread;\n  export let maxWidth = 100;\n  let width = `${maxWidth}px`;\n</script>\n\n<style>\n  div {\n    overflow: hidden;\n  }\n</style>\n\n{#if thread}\n  <div class=\"flex-child {thread.state} file-thread\" style=\"width: {width}\">\n    {thread.stack[0]}\n  </div>\n{:else}\n  <div class=\"flex-child\" style=\"width: {maxWidth}px\" />\n{/if}\n"
  ],
  "names": [],
  "mappings": "AAqEE,GAAG,8BAAC,CAAC,AACH,UAAU,CAAE,UAAU,CACtB,SAAS,CAAE,IAAI,AACjB,CAAC,AAED,GAAG,8BAAC,CAAC,AACH,KAAK,CAAE,IAAI,AACb,CAAC,AAED,eAAe,8BAAC,CAAC,AACf,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,OAAO,CACpB,KAAK,CAAE,IAAI,AACb,CAAC,AACD,WAAW,8BAAC,CAAC,AACX,QAAQ,CAAE,MAAM,CAChB,OAAO,CAAE,GAAG,AACd,CAAC,AACD,KAAK,8BAAC,CAAC,AACL,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,OAAO,AACtB,CAAC,AACD,QAAQ,8BAAC,CAAC,AACR,KAAK,CAAE,IAAI,AACb,CAAC,AACD,2BAAY,CAAC,QAAQ,eAAC,CAAC,AACrB,UAAU,CAAE,KAAK,AACnB,CAAC,AACD,2BAAY,CAAC,KAAK,eAAC,CAAC,AAClB,KAAK,CAAE,IAAI,CAAC,UAAU,CACtB,MAAM,CAAE,CAAC,CAAC,GAAG,AACf,CAAC,AACD,yCAAW,MAAM,AAAC,CAAC,AACjB,gBAAgB,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,AAGrC,CAAC;AC5CC,yBAAU,CAAC,AACP,OAAO,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAC9C,gBAAgB,CAAE,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,UAAU,AAEpD,CAAC,AACD,SAAS,eAAC,CAAC,AACP,WAAW,CAAE,KAAK,CAClB,OAAO,KAAK,CACZ,OAAO,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CACpC,gBAAgB,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAEzC,CAAC;AChEH,GAAG,eAAC,CAAC,AACH,QAAQ,CAAE,MAAM,AAClB,CAAC"
}